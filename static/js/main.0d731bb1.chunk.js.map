{"version":3,"sources":["TimelapseSlider.jsx","useWindowSize.js","App.js","serviceWorker.js","index.js"],"names":["TimelapseSlider","image_urls","useState","photo_id","setPhotoId","win_width","width","undefined","height","windowSize","setWindowSize","useEffect","handleResize","window","innerWidth","innerHeight","addEventListener","removeEventListener","useWindowSize","className","style","src","Slider","orientation","defaultValue","length","min","max","track","marks","step","onChange","ev","value","IMAGE_URLS","App","fontFamily","fontSize","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"yPAQe,SAASA,EAAT,GAA0C,IAAfC,EAAc,EAAdA,WACtC,EAAiCC,mBAHf,GAGlB,mBAAQC,EAAR,KAAkBC,EAAlB,KAEaC,ECPF,WAGX,MAAoCH,mBAAS,CACzCI,WAAOC,EACPC,YAAQD,IAFZ,mBAAOE,EAAP,KAAmBC,EAAnB,KAoBA,OAhBAC,qBAAU,WAEN,SAASC,IAELF,EAAc,CACVJ,MAAOO,OAAOC,WACdN,OAAQK,OAAOE,cAQvB,OAJAF,OAAOG,iBAAiB,SAAUJ,GAElCA,IAEO,kBAAMC,OAAOI,oBAAoB,SAAUL,MACnD,IACIH,EDhBoBS,GAArBZ,MACND,GAAa,IAMb,OAAO,yBAAKc,UAAU,qBAClB,yBAAKC,MAAO,CAAEd,MAAM,GAAD,OAAKD,EAAL,MAAoBG,OAAO,GAAD,OAAKH,EAAU,EAAf,OAAwBc,UAAU,kDAC3E,yBAAKA,UAAU,yBAAyBE,IAAKpB,EAAWE,MAE5D,yBAAKiB,MAAO,CAAEZ,OAAO,GAAD,OAAKH,EAAU,EAAf,QAChB,kBAACiB,EAAA,EAAD,CACIC,YAAY,WACZC,aAAcvB,EAAWwB,OAnBnB,EAoBNC,IAAK,EACLC,IAAK1B,EAAWwB,OAAO,EACvBG,MAAM,WACNC,OAAK,EACLC,KAAM,EACNC,SAjBe,SAACC,EAAIC,GAC5B7B,EAAWH,EAAWwB,OAASQ,EAAO,QEX9C,IAAMC,EAAa,CAAE,sCAAuC,wCAkB7CC,MAhBf,WACI,OACI,yBAAKhB,UAAU,qEACX,yBAAKA,UAAU,yCACX,yBAAKA,UAAU,sDAAsDC,MAAO,CAAEgB,WAAY,uBACtF,yBAAKhB,MAAO,CAAEiB,SAAU,QAAUlB,UAAU,iBAA5C,gBAGJ,6BACI,kBAACnB,EAAD,CAAiBC,WAAYiC,QCH7BI,QACW,cAA7BzB,OAAO0B,SAASC,UAEe,UAA7B3B,OAAO0B,SAASC,UAEhB3B,OAAO0B,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.0d731bb1.chunk.js","sourcesContent":["import React, { useState, useMemo } from 'react';\n\nimport {styled, withStyles} from '@material-ui/core/styles';\nimport Slider from '@material-ui/core/Slider';\nimport useWindowSize from './useWindowSize.js';\n\nconst default_index = 0;\n\nexport default function TimelapseSlider({ image_urls }) {\n    const [ photo_id, setPhotoId ] = useState(default_index);\n    \n    let { width: win_width } = useWindowSize();\n    win_width *= 0.85;\n\n    const handleSliderChange = (ev, value) => {\n        setPhotoId(image_urls.length - value -1)\n    }\n\n    return <div className=\"flex items-center\">\n        <div style={{ width: `${win_width}px`, height: `${win_width/2}px` }} className=\"flex items-center overflow-hidden align-center\">\n            <img className=\"w-full overflow-hidden\" src={image_urls[photo_id]} />\n        </div>\n        <div style={{ height: `${win_width/2}px` }}>\n            <Slider\n                orientation=\"vertical\"\n                defaultValue={image_urls.length - default_index}\n                min={0}\n                max={image_urls.length-1}\n                track=\"inverted\"\n                marks\n                step={1}\n                onChange={handleSliderChange}\n            />\n        </div>\n    </div>\n}\n\n//<Slider\n//  sx={{\n//    '& input[type=\"range\"]': {\n//      WebkitAppearance: 'slider-vertical',\n//    },\n//  }}\n//  orientation=\"vertical\"\n//  defaultValue={30}\n//  aria-label=\"Temperature\"\n//  valueLabelDisplay=\"auto\"\n//  onKeyDown={preventHorizontalKeyboardNavigation}\n///>\n","// from https://usehooks.com/useWindowSize/\nimport { useState, useEffect } from \"react\";\n\n// Hook\nexport default function useWindowSize() {\n    // Initialize state with undefined width/height so server and client renders match\n    // Learn more here: https://joshwcomeau.com/react/the-perils-of-rehydration/\n    const [windowSize, setWindowSize] = useState({\n        width: undefined,\n        height: undefined,\n    });\n    useEffect(() => {\n        // Handler to call on window resize\n        function handleResize() {\n            // Set window width/height to state\n            setWindowSize({\n                width: window.innerWidth,\n                height: window.innerHeight,\n            });\n        }\n        // Add event listener\n        window.addEventListener(\"resize\", handleResize);\n        // Call handler right away so state gets updated with initial window size\n        handleResize();\n        // Remove event listener on cleanup\n        return () => window.removeEventListener(\"resize\", handleResize);\n    }, []); // Empty array ensures that effect is only run on mount\n    return windowSize;\n}\n\n","import React from 'react';\nimport './tailwind.css';\nimport TimelapseSlider from './TimelapseSlider.jsx';\n\nconst IMAGE_URLS = [ \"/timelapse_images/day1-working.jpeg\", \"/timelapse_images/day1-complete.jpeg\"];\n\nfunction App() {\n    return (\n        <div className=\"w-screen min-h-screen overflow-x-hidden bg-gray-900 scroll-x-none\">\n            <div className=\"flex flex-col items-center w-full p-6\">\n                <div className=\"flex justify-center text-pink-400 align-text-bottom\" style={{ fontFamily: \"'Lobster', cursive\" }}>\n                    <div style={{ fontSize: '80px' }} className=\"font-semibold\">The Ninties</div>\n        {/*<div style={{ fontSize: '30px' }}>Allen&apos;s English Class</div>*/}\n                </div>\n                <div>\n                    <TimelapseSlider image_urls={IMAGE_URLS} />\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}